
package com.jfx.net.tsapi;

import javax.jws.WebMethod;
import javax.jws.WebParam;
import javax.jws.WebResult;
import javax.jws.WebService;
import javax.xml.bind.annotation.XmlSeeAlso;
import javax.xml.ws.RequestWrapper;
import javax.xml.ws.ResponseWrapper;
import java.util.List;


/**
 * This class was generated by the JAX-WS RI.
 * JAX-WS RI 2.2.8
 * Generated source version: 2.2
 * 
 */
@WebService(name = "TS", targetNamespace = "http://ts.nj4x.com/")
@XmlSeeAlso({
    ObjectFactory.class
})
public interface TS {


    /**
     * 
     * @param token
     * @return
     *     returns java.util.List<java.lang.String>
     * @throws Nj4XSessionExpiredException_Exception
     * @throws Nj4XInvalidTokenException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getAvailableSRVFiles", targetNamespace = "http://ts.nj4x.com/", className = "com.jfx.net.tsapi.GetAvailableSRVFiles")
    @ResponseWrapper(localName = "getAvailableSRVFilesResponse", targetNamespace = "http://ts.nj4x.com/", className = "com.jfx.net.tsapi.GetAvailableSRVFilesResponse")
    public List<String> getAvailableSRVFiles(
        @WebParam(name = "token", targetNamespace = "")
        long token)
        throws Nj4XInvalidTokenException_Exception, Nj4XSessionExpiredException_Exception
    ;

    /**
     * 
     * @return
     *     returns long
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getBoxID", targetNamespace = "http://ts.nj4x.com/", className = "com.jfx.net.tsapi.GetBoxID")
    @ResponseWrapper(localName = "getBoxIDResponse", targetNamespace = "http://ts.nj4x.com/", className = "com.jfx.net.tsapi.GetBoxIDResponse")
    public long getBoxID();

    /**
     * 
     * @param mt4Account
     * @param nj4XEAParams
     * @param token
     * @return
     *     returns java.lang.String
     * @throws Nj4XSessionExpiredException_Exception
     * @throws Nj4XInvalidTokenException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "checkMT4Terminal", targetNamespace = "http://ts.nj4x.com/", className = "com.jfx.net.tsapi.CheckMT4Terminal")
    @ResponseWrapper(localName = "checkMT4TerminalResponse", targetNamespace = "http://ts.nj4x.com/", className = "com.jfx.net.tsapi.CheckMT4TerminalResponse")
    public String checkMT4Terminal(
        @WebParam(name = "token", targetNamespace = "")
        long token,
        @WebParam(name = "mt4Account", targetNamespace = "")
        Nj4XMT4Account mt4Account,
        @WebParam(name = "nj4xEAParams", targetNamespace = "")
        Nj4XParams nj4XEAParams)
        throws Nj4XInvalidTokenException_Exception, Nj4XSessionExpiredException_Exception
    ;

    /**
     * 
     * @param token
     */
    @WebMethod
    @RequestWrapper(localName = "close", targetNamespace = "http://ts.nj4x.com/", className = "com.jfx.net.tsapi.Close")
    @ResponseWrapper(localName = "closeResponse", targetNamespace = "http://ts.nj4x.com/", className = "com.jfx.net.tsapi.CloseResponse")
    public void close(
        @WebParam(name = "token", targetNamespace = "")
        long token);

    /**
     * 
     * @param token
     * @return
     *     returns com.jfx.net.tsapi.Nj4XTSInfo
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getTSInfo", targetNamespace = "http://ts.nj4x.com/", className = "com.jfx.net.tsapi.GetTSInfo")
    @ResponseWrapper(localName = "getTSInfoResponse", targetNamespace = "http://ts.nj4x.com/", className = "com.jfx.net.tsapi.GetTSInfoResponse")
    public Nj4XTSInfo getTSInfo(
        @WebParam(name = "token", targetNamespace = "")
        long token);

    /**
     * 这个是连接的方法
     * @param clientInfo
     * @return
     *     returns long
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "startSession", targetNamespace = "http://ts.nj4x.com/", className = "com.jfx.net.tsapi.StartSession")
    @ResponseWrapper(localName = "startSessionResponse", targetNamespace = "http://ts.nj4x.com/", className = "com.jfx.net.tsapi.StartSessionResponse")
    public long startSession(
        @WebParam(name = "clientInfo", targetNamespace = "")
        Nj4XClientInfo clientInfo);

    /**
     * 
     * @param mt4Account
     * @param nj4XEAParams
     * @param token
     * @param restartTerminalIfRunning
     * @return
     *     returns java.lang.String
     * @throws Nj4XSessionExpiredException_Exception
     * @throws Nj4XInvalidTokenException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "runMT4Terminal", targetNamespace = "http://ts.nj4x.com/", className = "com.jfx.net.tsapi.RunMT4Terminal")
    @ResponseWrapper(localName = "runMT4TerminalResponse", targetNamespace = "http://ts.nj4x.com/", className = "com.jfx.net.tsapi.RunMT4TerminalResponse")
    public String runMT4Terminal(
        @WebParam(name = "token", targetNamespace = "")
        long token,
        @WebParam(name = "mt4Account", targetNamespace = "")
        Nj4XMT4Account mt4Account,
        @WebParam(name = "nj4xEAParams", targetNamespace = "")
        Nj4XParams nj4XEAParams,
        @WebParam(name = "restartTerminalIfRunning", targetNamespace = "")
        boolean restartTerminalIfRunning)
        throws Nj4XInvalidTokenException_Exception, Nj4XSessionExpiredException_Exception
    ;

    /**
     * 
     * @param mt4Account
     * @param nj4XEAParams
     * @param token
     * @return
     *     returns java.lang.String
     * @throws Nj4XSessionExpiredException_Exception
     * @throws Nj4XInvalidTokenException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "disconnectMT4Terminal", targetNamespace = "http://ts.nj4x.com/", className = "com.jfx.net.tsapi.DisconnectMT4Terminal")
    @ResponseWrapper(localName = "disconnectMT4TerminalResponse", targetNamespace = "http://ts.nj4x.com/", className = "com.jfx.net.tsapi.DisconnectMT4TerminalResponse")
    public String disconnectMT4Terminal(
        @WebParam(name = "token", targetNamespace = "")
        long token,
        @WebParam(name = "mt4Account", targetNamespace = "")
        Nj4XMT4Account mt4Account,
        @WebParam(name = "nj4xEAParams", targetNamespace = "")
        Nj4XParams nj4XEAParams)
        throws Nj4XInvalidTokenException_Exception, Nj4XSessionExpiredException_Exception
    ;

    /**
     * 
     * @param mt4Account
     * @param nj4XEAParams
     * @param token
     * @return
     *     returns java.lang.String
     * @throws Nj4XSessionExpiredException_Exception
     * @throws Nj4XInvalidTokenException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "killMT4Terminal", targetNamespace = "http://ts.nj4x.com/", className = "com.jfx.net.tsapi.KillMT4Terminal")
    @ResponseWrapper(localName = "killMT4TerminalResponse", targetNamespace = "http://ts.nj4x.com/", className = "com.jfx.net.tsapi.KillMT4TerminalResponse")
    public String killMT4Terminal(
        @WebParam(name = "token", targetNamespace = "")
        long token,
        @WebParam(name = "mt4Account", targetNamespace = "")
        Nj4XMT4Account mt4Account,
        @WebParam(name = "nj4xEAParams", targetNamespace = "")
        Nj4XParams nj4XEAParams)
        throws Nj4XInvalidTokenException_Exception, Nj4XSessionExpiredException_Exception
    ;

}
